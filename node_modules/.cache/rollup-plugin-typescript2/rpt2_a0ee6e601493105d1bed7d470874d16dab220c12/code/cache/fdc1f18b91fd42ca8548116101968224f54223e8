{"code":"import { __assign, __awaiter, __generator, __spreadArray } from \"tslib\";\n// @ts-nocheck\nimport { createNextControl, getMetaOption, showLoading, replaceRouters } from \"../utils\";\nvar currentRouterInstance;\nvar config = {\n    loading: true,\n    loadingText: \"加载中\",\n    startPage: \"/\",\n    routerMeta: {},\n    notFound: \"/pages/notFound/index\",\n};\nvar currentRoute = {\n    path: '/',\n    options: {},\n    url: '/',\n    type: 'switchTab',\n};\n// 存储上一个路由信息\nvar parentRoute = {\n    options: {},\n    path: '/',\n    type: 'switchTab',\n    url: '/',\n};\nreplaceRouters.forEach(function (item) {\n    uni.addInterceptor(item, {\n        fail: function () {\n            config.notFound && uni.navigateTo({ url: config.notFound });\n        }\n    });\n});\nfunction onShow() {\n    var _a;\n    (_a = this === null || this === void 0 ? void 0 : this.$) === null || _a === void 0 ? void 0 : _a.onLoad[0]();\n}\nfunction onLoad(onLoads) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, next, isNext, navigat, navigatPage;\n        var _this = this;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = createNextControl(), next = _a.next, isNext = _a.isNext, navigat = _a.navigat;\n                    config.loading && showLoading(config.loadingText);\n                    return [4 /*yield*/, currentRouterInstance.beforeEachFunc({ next: next, to: currentRoute, from: parentRoute })];\n                case 1:\n                    _b.sent();\n                    config.loading && uni.hideLoading();\n                    if (!isNext()) {\n                        uni[parentRoute.type]({ url: parentRoute.url });\n                    }\n                    else {\n                        onLoads.forEach(function (func) {\n                            func.call(_this, _this.$scope.options);\n                        });\n                        navigatPage = navigat();\n                        if (navigatPage) {\n                            uni[navigatPage.type]({ url: navigatPage.url });\n                        }\n                        else {\n                            currentRouterInstance.afterEachFunc({ to: currentRoute, from: parentRoute });\n                        }\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nvar wxHooks = {\n    onLaunch: function () {\n        uni.onBeforeAppRoute(function (res) {\n            var meta = getMetaOption(config.routerMeta, '/' + res.path);\n            parentRoute = currentRoute;\n            currentRoute = {\n                path: '/' + res.path,\n                options: res.query,\n                url: '/' + res.path,\n                type: res.openType === 'appLaunch' ? 'switchTab' : res.openType,\n                meta: meta\n            };\n        });\n    },\n    beforeCreate: function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var onFunc;\n            return __generator(this, function (_a) {\n                if (this.mpType == 'page') {\n                    onFunc = this.$.onLoad ? __spreadArray([], this.$.onLoad, true) : [];\n                    onFunc = this.$onShow ? __spreadArray(__spreadArray([], onFunc, true), this.$onShow, true) : onFunc;\n                    this.$.onLoad = [onLoad.bind(this, onFunc)];\n                    this.$.onShow = [];\n                }\n                return [2 /*return*/];\n            });\n        });\n    },\n    mounted: function () {\n        var _this = this;\n        nextTick(function () {\n            if (_this.$mpType === \"page\") {\n                _this.$.onShow.unshift(onShow.bind(_this));\n            }\n        });\n    },\n};\nvar createWxControl = function (defaultConfig, defaultHooks) {\n    Object.assign(config, defaultConfig);\n    if (defaultConfig.startPage) {\n        parentRoute.path = defaultConfig.startPage;\n        parentRoute.url = defaultConfig.startPage;\n        currentRoute.path = defaultConfig.startPage;\n        currentRoute.url = defaultConfig.startPage;\n    }\n    currentRouterInstance = __assign(__assign({}, wxHooks), defaultHooks);\n    return currentRouterInstance;\n};\nexport default createWxControl;\n","references":["C:/Users/74727/Desktop/my-utils/src/utils.ts"],"dts":{"name":"C:/Users/74727/Desktop/my-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/wx/index.d.ts","writeByteOrderMark":false,"text":"declare const createWxControl: (defaultConfig: RouterConfig, defaultHooks: RouterMixin) => RouterWxMixin & RouterMixin;\nexport default createWxControl;\n"}}
