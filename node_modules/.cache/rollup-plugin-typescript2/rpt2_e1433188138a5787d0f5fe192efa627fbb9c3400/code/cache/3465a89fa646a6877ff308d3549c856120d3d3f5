{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\n// @ts-nocheck\nimport { getMetaOption, createNextControl, showLoading, getCurrentPage, replaceRouters } from \"../utils\";\n// #ifdef H5 || APP-PLUS\nvar firstPage = true;\nvar isUnload = false;\nvar currentRouterInstance;\nvar config = {\n    loading: true,\n    loadingText: \"加载中\",\n    startPage: \"/\",\n    routerMeta: {},\n    notFound: \"/pages/notFound/index\",\n};\nvar routesList = [{ path: config.startPage, url: config.startPage, options: {}, type: 'switchTab' }];\nvar currentRoute = {\n    path: '/',\n    options: {},\n    url: '/',\n    type: 'switchTab',\n};\n// 存储上一个路由信息\nvar parentRoute = {\n    options: {},\n    path: '/',\n    type: 'switchTab',\n    url: '/',\n};\n// 重写路由方法\nvar nativeRoutersFunc = Object.fromEntries(replaceRouters.map(function (item) { return [item, uni[item]]; }));\nfunction getQueryParams(url) {\n    var _a = url.split(\"?\") || [url, \"\"], path = _a[0], _b = _a[1], queryString = _b === void 0 ? \"\" : _b;\n    var query = Object.fromEntries(queryString.split(\"&\").map(function (pair) { return pair.split(\"=\").map(decodeURIComponent); }));\n    return { path: path, query: query };\n}\nreplaceRouters.forEach(function (item) {\n    uni[item] = function (options) { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, next, isNext, navigat, to, success, oddCurrentRoute, _b, path, query, navigatPage;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    _a = createNextControl(), next = _a.next, isNext = _a.isNext, navigat = _a.navigat;\n                    success = options.success || (function () { });\n                    if (item != \"navigateTo\") {\n                        isUnload = true;\n                    }\n                    if (item != \"navigateBack\") {\n                        _b = getQueryParams(options.url), path = _b.path, query = _b.query;\n                        to = {\n                            path: path,\n                            options: query,\n                            url: options.url,\n                            type: item,\n                            meta: getMetaOption(config.routerMeta, path),\n                        };\n                        oddCurrentRoute = currentRoute;\n                        currentRoute = to;\n                        parentRoute = oddCurrentRoute;\n                        routesList.push(to);\n                    }\n                    else {\n                        options = __assign({ delta: 1 }, options);\n                        parentRoute = routesList[routesList.length - options.delta];\n                        routesList.splice(-options.delta);\n                        currentRoute = routesList[routesList.length - 1];\n                        to = currentRoute;\n                    }\n                    config.loading && showLoading(config.loadingText);\n                    return [4 /*yield*/, currentRouterInstance.beforeEachFunc({ next: next, to: to, from: parentRoute })];\n                case 1:\n                    _c.sent();\n                    config.loading && uni.hideLoading();\n                    if (isNext()) {\n                        navigatPage = navigat();\n                        if (navigatPage) {\n                            uni[navigatPage.type]({ url: navigatPage.url });\n                            return [2 /*return*/];\n                        }\n                        nativeRoutersFunc[to.type]({\n                            url: to.url,\n                            success: function () {\n                                success();\n                                isUnload = false;\n                                currentRouterInstance.afterEachFunc && currentRouterInstance.afterEachFunc({ to: to, from: parentRoute });\n                            },\n                            fail: function () {\n                                config.notFound && uni.navigateTo({ url: config.notFound });\n                            }\n                        });\n                    }\n                    else {\n                        uni[parentRoute.type]({ url: parentRoute.url });\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n});\nfunction handleUnload() {\n    return __awaiter(this, void 0, void 0, function () {\n        var isNext, navigat, next;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    isNext = false;\n                    parentRoute = routesList[routesList.length - 1];\n                    routesList.pop();\n                    currentRoute = routesList[routesList.length - 1];\n                    next = function (page) {\n                        navigat = page;\n                        isNext = true;\n                    };\n                    config.loading && showLoading(config.loadingText);\n                    return [4 /*yield*/, currentRouterInstance.beforeEachFunc({ next: next, to: currentRoute, from: parentRoute })];\n                case 1:\n                    _a.sent();\n                    config.loading && uni.hideLoading();\n                    if (!isNext) {\n                        uni[parentRoute.type](__assign({}, parentRoute));\n                        return [2 /*return*/];\n                    }\n                    if (navigat) {\n                        uni[navigat.type]({ url: navigat.url });\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nvar publicHooks = {\n    beforeCreate: function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var page, _a, next, isNext, navigat, navigatPage;\n            var _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!(firstPage && this.route)) return [3 /*break*/, 3];\n                        page = getCurrentPage();\n                        if (!page) return [3 /*break*/, 2];\n                        currentRoute = {\n                            path: '/' + page.route,\n                            options: page.options || ((_b = page.$page) === null || _b === void 0 ? void 0 : _b.options) || {},\n                            type: 'switchTab',\n                            url: ((_c = page.$page) === null || _c === void 0 ? void 0 : _c.fullPath) || '',\n                            mate: getMetaOption(config.routerMeta, '/' + page.route),\n                        };\n                        routesList.push(currentRoute);\n                        _a = createNextControl(), next = _a.next, isNext = _a.isNext, navigat = _a.navigat;\n                        config.loading && showLoading(config.loadingText);\n                        return [4 /*yield*/, currentRouterInstance.beforeEachFunc({ next: next, to: currentRoute, from: parentRoute })];\n                    case 1:\n                        _d.sent();\n                        config.loading && uni.hideLoading();\n                        if (isNext()) {\n                            navigatPage = navigat();\n                            if (navigatPage) {\n                                uni[navigatPage.type]({ url: navigatPage.url });\n                                return [2 /*return*/];\n                            }\n                            currentRouterInstance.afterEachFunc && currentRouterInstance.afterEachFunc({ to: currentRoute, from: parentRoute });\n                        }\n                        else {\n                            uni[currentRoute.type]({ url: currentRoute.url });\n                        }\n                        _d.label = 2;\n                    case 2:\n                        firstPage = false;\n                        _d.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    },\n    onUnload: function () {\n        !isUnload && handleUnload();\n    },\n};\nvar createPublicControl = function (defaultConfig, defaultHooks) {\n    Object.assign(config, defaultConfig);\n    currentRouterInstance = __assign(__assign({}, defaultHooks), publicHooks);\n    return currentRouterInstance;\n};\nexport default createPublicControl;\n// #endif\n","references":["C:/Users/74727/Desktop/my-utils/src/utils.ts"],"dts":{"name":"C:/Users/74727/Desktop/my-utils/node_modules/.cache/rollup-plugin-typescript2/placeholder/h5app/index.d.ts","writeByteOrderMark":false,"text":"declare const createPublicControl: (defaultConfig: RouterConfig, defaultHooks: RouterMixin) => RouterPublicMixin & RouterMixin;\nexport default createPublicControl;\n"}}
